# 워크플로우의 이름을 지정합니다.
name: Deploy to DigitalOcean

# 이 워크플로우가 실행될 시점을 정의합니다.
on:
  # 'main' 브랜치에 push 이벤트가 발생했을 때 실행됩니다.
  push:
    branches:
      - main

# 실행될 작업(job)들을 정의합니다.
jobs:
  # 'deploy'라는 이름의 작업을 정의합니다.
  deploy:
    # 이 작업이 실행될 가상 환경을 지정합니다. (최신 Ubuntu)
    runs-on: ubuntu-latest

    # 작업의 단계(step)들을 순서대로 정의합니다.
    steps:
      # 1. 코드 체크아웃
      # GitHub 저장소의 코드를 가상 환경으로 가져옵니다.
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      # GitHub Secrets에 저장된 Docker Hub 사용자 이름과 비밀번호를 사용하여 로그인합니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Docker 이미지 빌드 및 푸시
      # Dockerfile을 사용하여 이미지를 빌드하고, Docker Hub에 푸시합니다.
      # 이미지 태그는 'latest'와 현재 커밋의 SHA 해시, 두 가지로 지정하여 버전을 관리합니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/politisian-app:latest,${{ secrets.DOCKER_USERNAME }}/politisian-app:${{ github.sha }}

      # 4. DigitalOcean 서버에 접속하여 배포
      # SSH를 사용하여 서버에 접속하고, 필요한 명령어들을 실행합니다.
      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            set -e
            whoami
            
            # Check and install Git
            if ! command -v git &> /dev/null
            then
                echo "Git could not be found, installing..."
                apt-get update
                apt-get install -y git
            fi

            # Check and install Docker
            if ! command -v docker &> /dev/null
            then
                echo "Docker could not be found, installing..."
                apt-get update
                apt-get install -y docker.io
                systemctl start docker
                systemctl enable docker
            fi

            # Check and install Docker Compose
            if ! command -v docker-compose &> /dev/null
            then
                echo "Docker Compose could not be found, installing..."
                curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
            fi
            
            # Check and install Nginx
            if ! command -v nginx &> /dev/null
            then
                echo "Nginx not found, installing..."
                apt-get update
                apt-get install -y nginx
            fi

            # Configure Nginx as a reverse proxy
            cat > /etc/nginx/sites-available/politisian <<'EOF'
            server {
                listen 80;
                listen [::]:80;

                server_name politisian.org www.politisian.org;

                location / {
                    proxy_pass http://localhost:8080;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }
            EOF

            # Enable the new configuration
            ln -sf /etc/nginx/sites-available/politisian /etc/nginx/sites-enabled/
            # Disable the default Nginx configuration
            rm -f /etc/nginx/sites-enabled/default
            # Test config and restart Nginx
            nginx -t
            systemctl restart nginx
            
            # Clone repo if it doesn't exist, otherwise force update
            if [ ! -d "/root/politisian" ] ; then
              git clone git@github.com:${{ github.repository }}.git /root/politisian
              cd /root/politisian
            else
              cd /root/politisian
              git fetch origin main
              git reset --hard origin/main
            fi
            
            # 디스크 공간 정리 (빌드 전 필수)
            echo "=== 디스크 공간 정리 시작 ==="
            df -h
            
            # Docker 완전 정리
            docker system prune -a -f --volumes
            docker builder prune -a -f
            
            # 기존 컨테이너/이미지 강제 정리
            docker-compose down --volumes --remove-orphans 2>/dev/null || true
            docker rmi $(docker images -q) -f 2>/dev/null || true
            docker volume rm $(docker volume ls -q) -f 2>/dev/null || true
            
            # 시스템 캐시 정리
            apt-get clean
            apt-get autoremove -y --purge
            rm -rf /var/lib/apt/lists/*
            rm -rf /tmp/* /var/tmp/*
            find /var/log -name "*.log" -type f -delete 2>/dev/null || true
            
            # Go 캐시 완전 정리
            export GOCACHE=/tmp/go-build
            export GOMODCACHE=/tmp/go-mod
            rm -rf /root/.cache/go-build /root/go/pkg/mod 2>/dev/null || true
            go clean -cache -modcache -testcache 2>/dev/null || true
            
            echo "=== 디스크 공간 정리 완료 ==="
            df -h

            # 데이터 디렉토리 정리
            rm -rf ./data ./build_temp
            mkdir -p ./data

            # Docker Compose 실행 (메모리 제한 적용)
            echo "IMAGE_TAG=${{ github.sha }}" > .env
            docker-compose --env-file .env up -d --build --remove-orphans --force-recreate 