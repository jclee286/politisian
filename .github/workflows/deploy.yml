# 워크플로우의 이름을 지정합니다.
name: Deploy to DigitalOcean

# 이 워크플로우가 실행될 시점을 정의합니다.
on:
  # 'main' 브랜치에 push 이벤트가 발생했을 때 실행됩니다.
  push:
    branches:
      - main

# 실행될 작업(job)들을 정의합니다.
jobs:
  # 'deploy'라는 이름의 작업을 정의합니다.
  deploy:
    # 이 작업이 실행될 가상 환경을 지정합니다. (최신 Ubuntu)
    runs-on: ubuntu-latest

    # 작업의 단계(step)들을 순서대로 정의합니다.
    steps:
      # 1. 코드 체크아웃
      # GitHub 저장소의 코드를 가상 환경으로 가져옵니다.
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      # GitHub Secrets에 저장된 Docker Hub 사용자 이름과 비밀번호를 사용하여 로그인합니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Docker 이미지 빌드 및 푸시
      # Dockerfile을 사용하여 이미지를 빌드하고, Docker Hub에 푸시합니다.
      # 이미지 태그는 'latest'와 현재 커밋의 SHA 해시, 두 가지로 지정하여 버전을 관리합니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/politisian-app:latest,${{ secrets.DOCKER_USERNAME }}/politisian-app:${{ github.sha }}

      # 4. DigitalOcean 서버에 접속하여 배포
      # SSH를 사용하여 서버에 접속하고, 필요한 명령어들을 실행합니다.
      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            # --- 필수 프로그램 설치 및 실행 ---
            apt-get update
            # git, curl 설치
            apt-get install -y git curl
            # Docker가 없으면 설치하고, 실행합니다.
            if ! command -v docker &> /dev/null; then
                echo "Docker not found, installing..."
                apt-get install -y docker.io
            fi
            systemctl start docker
            systemctl enable docker
            # docker-compose가 없으면 설치합니다.
            if ! command -v docker-compose &> /dev/null; then
                echo "docker-compose not found, installing..."
                curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
            fi

            # --- 애플리케이션 배포 ---
            if [ ! -d "/root/politisian" ]; then
              git clone git@github.com:${{ github.repository }}.git /root/politisian
            fi
            cd /root/politisian
            
            git pull
            
            # --- Docker 정리 및 실행 ---
            # 공간 확보를 위해 사용하지 않는 Docker 리소스(이미지, 컨테이너 등)를 정리합니다.
            echo "Pruning Docker system..."
            docker system prune -af
            
            # --env-file 옵션을 사용하여 .env 파일을 명시적으로 지정하고, 항상 새로 빌드하여 실행합니다.
            docker-compose --env-file .env up -d --build --remove-orphans 